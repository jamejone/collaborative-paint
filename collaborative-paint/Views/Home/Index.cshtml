@model collaborative_paint.Models.StrokeHistoryManager

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Collaborative paint</title>
</head>
<body>
    <canvas id="can" width="350px" height="350px" style="position:absolute;top:10%;left:0px;border:2px solid;"></canvas>
    
    <div style="position:absolute;bottom:90%;left:0px;width:10%;height:10%;background:green;" id="green" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:10%;width:10%;height:10%;background:blue;" id="blue" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:20%;width:10%;height:10%;background:red;" id="red" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:30%;width:10%;height:10%;background:yellow;" id="yellow" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:40%;width:10%;height:10%;background:orange;" id="orange" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:50%;width:10%;height:10%;background:black;" id="black" onclick="color(this)"></div>
    <div style="position:absolute;bottom:90%;left:60%;width:10%;height:10%;background:white;border:2px solid;" id="white" onclick="color(this)" ondblclick="erase()"></div>
    

    <script src="~/lib/signalr/signalr.js"></script>    
    <script type="text/javascript">
    
    // The following sample code uses modern ECMAScript 6 features 
// that aren't supported in Internet Explorer 11.
// To convert the sample for environments that do not support ECMAScript 6, 
// such as Internet Explorer 11, use a transpiler such as 
// Babel at http://babeljs.io/. 
//
// See Es5-chat.js for a Babel transpiled version of the following code:

var startXArray = [], startYArray = [], endXArray = [], endYArray = [];
var curStrokeStartXArray = [], curStrokeStartYArray = [], curStrokeEndXArray = [], curStrokeEndYArray = [];

var strokeHistory = @Html.Raw(Model.ToJson());

var canvas, ctx, flag = false,
prevX = 0,
currX = 0,
prevY = 0,
currY = 0,
dot_flag = false;

var brushColor = "black",
brushThickness = 5;

const connection = new signalR.HubConnectionBuilder()
    .withUrl("/chatHub")
    .build();

connection.on("ReceivePaint", (startX, startY, endX, endY, color) => { 
    paintStroke(startX, startY, endX, endY, color);
});

connection.on("EraseBoard", () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
});

function paintStroke(startXArray, startYArray, endXArray, endYArray, color) {
    for (var i = 0; i < startXArray.length; i++) {
        drawLine(startXArray[i], startYArray[i], endXArray[i], endYArray[i], color);
    }
}

setInterval(function(){
    if (connection.connection.connectionState == 1 && startXArray.length > 0) {
        connection.invoke("BroadcastPaint", startXArray, startYArray, endXArray, endYArray, brushColor).catch(err => console.error(err));
        startXArray = [];
        startYArray = [];
        endXArray = [];
        endYArray = [];
    }
}, 100);

connection.start().catch(err => console.error(err));

function init() {
    canvas = document.getElementById('can');
    ctx = canvas.getContext("2d");

    for (var i = 0; i < strokeHistory.length; i++) { 
        paintStroke(strokeHistory[i].StartXList, strokeHistory[i].StartYList, strokeHistory[i].EndXList, strokeHistory[i].EndYList, strokeHistory[i].Color);
    }

    canvas.addEventListener("mousemove", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
    canvas.addEventListener("mousedown", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
    canvas.addEventListener("mouseup", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
    canvas.addEventListener("mouseout", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);

    canvas.addEventListener("touchstart", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
    canvas.addEventListener("touchend", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
    canvas.addEventListener("touchmove", function (e) {
        findxy(e)
        e.preventDefault();
    }, false);
}

function color(obj) {
    switch (obj.id) {
        case "green":
        brushColor = "green";
            break;
        case "blue":
        brushColor = "blue";
            break;
        case "red":
        brushColor = "red";
            break;
        case "yellow":
        brushColor = "yellow";
            break;
        case "orange":
        brushColor = "orange";
            break;
        case "black":
        brushColor = "black";
            break;
        case "white":
        brushColor = "white";
            break;
    }
}

function draw() {
    curStrokeStartXArray.push(prevX);
    curStrokeStartYArray.push(prevY);
    curStrokeEndXArray.push(currX);
    curStrokeEndYArray.push(currY);

    drawLine(prevX, prevY, currX, currY, brushColor);
}

function drawLine(x1, y1, x2, y2, color) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.strokeStyle = color;
    ctx.lineWidth = brushThickness;
    ctx.lineCap = 'round';
    ctx.stroke();
    ctx.closePath();
}

function findxy(e) {
    if (e.type === 'touchstart' || e.type === 'mousedown') {
        prevX = currX;
        prevY = currY;

        if (e.type === 'mousedown') {
            currX = e.clientX - canvas.offsetLeft;
            currY = e.clientY - canvas.offsetTop;
        }

        if (e.type === 'touchstart') {
            currX = e.touches[0].clientX - canvas.offsetLeft;
            currY = e.touches[0].clientY - canvas.offsetTop;
        }

        flag = true;
        dot_flag = true;
        if (dot_flag) {
            ctx.beginPath();
            ctx.fillStyle = brushColor;
            ctx.fillRect(currX, currY, 2, 2);
            ctx.closePath();
            dot_flag = false;
        }
    }
    if (e.type === 'touchend' || e.type === 'mouseup' || e.type === 'mouseout') {
        flag = false;
        startXArray = startXArray.concat(curStrokeStartXArray);
        startYArray = startYArray.concat(curStrokeStartYArray);
        endXArray = endXArray.concat(curStrokeEndXArray);
        endYArray = endYArray.concat(curStrokeEndYArray);

        curStrokeStartXArray = [];
        curStrokeStartYArray = [];
        curStrokeEndXArray = [];
        curStrokeEndYArray = [];
    }
    if (e.type === 'mousemove' || e.type === 'touchmove' ) {
        if (flag) {
            prevX = currX;
            prevY = currY;

            if (e.type === 'mousemove') {
                currX = e.clientX - canvas.offsetLeft;
                currY = e.clientY - canvas.offsetTop;
            }
        
            if (e.type === 'touchmove') {
                currX = e.touches[0].clientX - canvas.offsetLeft;
                currY = e.touches[0].clientY - canvas.offsetTop;
            }
            draw();
        }
    }
}

function erase() {
    connection.invoke("EraseBoard");
}

init();
    
    </script>
</body>
</html>